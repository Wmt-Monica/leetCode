<application>
  <component name="AppStorage">
    <histories>
      <item value="目标类" />
      <item value="销毁" />
      <item value="Indicates that a component is eligible for registration when one or more  * {@linkplain #value specified profiles} are active.  *  * &lt;p&gt;A &lt;em&gt;profile&lt;/em&gt; is a named logical grouping that may be activated  * programmatically via {@link ConfigurableEnvironment#setActiveProfiles} or declaratively  * by setting the {@link AbstractEnvironment#ACTIVE_PROFILES_PROPERTY_NAME  * spring.profiles.active} property as a JVM system property, as an  * environment variable, or as a Servlet context parameter in {@code web.xml}  * for web applications. Profiles may also be activated declaratively in  * integration tests via the {@code @ActiveProfiles} annotation.  *  * &lt;p&gt;The {@code @Profile} annotation may be used in any of the following ways:  * &lt;ul&gt;  * &lt;li&gt;as a type-level annotation on any class directly or indirectly annotated with  * {@code @Component}, including {@link Configuration @Configuration} classes&lt;/li&gt;  * &lt;li&gt;as a meta-annotation, for the purpose of composing custom stereotype annotations&lt;/li&gt;  * &lt;li&gt;as a method-level annotation on any {@link Bean @Bean} method&lt;/li&gt;  * &lt;/ul&gt;  *  * &lt;p&gt;If a {@code @Configuration} class is marked with {@code @Profile}, all of the  * {@code @Bean} methods and {@link Import @Import} annotations associated with that class  * will be bypassed unless one or more of the specified profiles are active. A profile  * string may contain a simple profile name (for example {@code &quot;p1&quot;}) or a profile  * expression. A profile expression allows for more complicated profile logic to be  * expressed, for example {@code &quot;p1 &amp; p2&quot;}. See {@link Profiles#of(String...)} for more  * details about supported formats.  *  * &lt;p&gt;This is analogous to the behavior in Spring XML: if the {@code profile} attribute of  * the {@code beans} element is supplied e.g., {@code &lt;beans profile=&quot;p1,p2&quot;&gt;}, the  * {@code beans} element will not be parsed unless at least profile 'p1' or 'p2' has been  * activated. Likewise, if a {@code @Component} or {@code @Configuration} class is marked  * with {@code @Profile({&quot;p1&quot;, &quot;p2&quot;})}, that class will not be registered or processed unless  * at least profile 'p1' or 'p2' has been activated.  *  * &lt;p&gt;If a given profile is prefixed with the NOT operator ({@code !}), the annotated  * component will be registered if the profile is &lt;em&gt;not&lt;/em&gt; active &amp;mdash; for example,  * given {@code @Profile({&quot;p1&quot;, &quot;!p2&quot;})}, registration will occur if profile 'p1' is active  * or if profile 'p2' is &lt;em&gt;not&lt;/em&gt; active.  *  * &lt;p&gt;If the {@code @Profile} annotation is omitted, registration will occur regardless  * of which (if any) profiles are active.  *  * &lt;p&gt;&lt;b&gt;NOTE:&lt;/b&gt; With {@code @Profile} on {@code @Bean} methods, a special scenario may  * apply: In the case of overloaded {@code @Bean} methods of the same Java method name  * (analogous to constructor overloading), an {@code @Profile} condition needs to be  * consistently declared on all overloaded methods. If the conditions are inconsistent,  * only the condition on the first declaration among the overloaded methods will matter.  * {@code @Profile} can therefore not be used to select an overloaded method with a  * particular argument signature over another; resolution between all factory methods  * for the same bean follows Spring's constructor resolution algorithm at creation time.  * &lt;b&gt;Use distinct Java method names pointing to the same {@link Bean#name bean name}  * if you'd like to define alternative beans with different profile conditions&lt;/b&gt;;  * see {@code ProfileDatabaseConfig} in {@link Configuration @Configuration}'s javadoc.  *  * &lt;p&gt;When defining Spring beans via XML, the {@code &quot;profile&quot;} attribute of the  * {@code &lt;beans&gt;} element may be used. See the documentation in the  * {@code spring-beans} XSD (version 3.1 or greater) for details." />
      <item value="资源" />
      <item value="productCategory" />
      <item value="productCategoryId" />
      <item value="/**  * This interface represents the abstract notion of a principal, which  * can be used to represent any entity, such as an individual, a  * corporation, and a login id.  *  * @see java.security.cert.X509Certificate  *  * @author Li Gong  * @since 1.1" />
      <item value="Error resolving template [my/encode/12345], template might not exist or might not be accessible by any of the configured Template Resolvers" />
      <item value="Hex-encoded string must have an even number of characters" />
      <item value="Unsatisfied dependency expressed through field 'userMapper'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException:" />
      <item value="register" />
      <item value="注册" />
      <item value="requires a single-arg method" />
      <item value="org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myController' defined in file [D:\github上传的文件\Wmtprogram2\homework\mysecurity\target\classes\cn\dreamplume\controller\MyController.class]: Post-processing of merged bean definition failed; nested exception is java.lang.IllegalStateException: @Resource annotation requires a single-arg method: public java.lang.String cn.dreamplume.controller.MyController.index() " />
      <item value="判断" />
      <item value="template might not exist or might not be accessible by any of the configured Template Resolvers" />
      <item value="Exception processing template &quot;user/findAll&quot;: Error resolving template [user/findAll], template might not exist or might not be accessible by any of the configured Template Resolvers " />
      <item value="Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary." />
      <item value="Table Configuration user matched more than one table (test..user,mysql..user,mysecurity..user)" />
      <item value="本地" />
      <item value="Table Configuration User matched more than one table (test..user,mysql..user,mysecurity..user) Table configuration with catalog null, schema null, and table UserRole did not resolve to any tables" />
      <item value="实体" />
      <item value="admin" />
      <item value="背景" />
      <item value="这是王梦婷的期末终极作业" />
      <item value="这是王梦婷期末终极作业" />
      <item value="期末终极作业" />
      <item value="组" />
      <item value="容器" />
      <item value="冒泡排序" />
      <item value="基数" />
      <item value="归并" />
      <item value="交换" />
      <item value="选择" />
      <item value="插入" />
      <item value="排序" />
      <item value="摆放" />
      <item value="皇后" />
      <item value="位置" />
      <item value="走迷宫" />
      <item value="迷宫" />
      <item value="递归" />
      <item value="转换" />
      <item value="括号" />
      <item value="Empty" />
      <item value="EmptyStackException" />
      <item value="多位数" />
      <item value="分解" />
      <item value="费解" />
      <item value="计算" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="44" />
        <entry key="ENGLISH" value="45" />
        <entry key="CATALAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>